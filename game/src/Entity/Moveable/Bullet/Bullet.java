package Entity.Moveable.Bullet;import Entity.AbstractEntity;import Entity.Moveable.Enemy.Enemy;import com.sun.javafx.geom.Vec2d;import core.Config;import core.GameField;import javafx.scene.canvas.GraphicsContext;import javafx.scene.image.Image;public abstract class Bullet extends AbstractEntity {    //default //TODO: change config every tower    private double speed;    private double damage;    private Image img;    private Enemy enemy;    // 11*23 + 12    public Bullet(double posX, double posY, double width, double height) {        super(posX, posY, width, height);    }    public final void setInfo(double speed, double damage){        this.speed = speed;        this.damage = damage;    }    public Enemy getEnemy() {        return enemy;    }    public Image getImg() { return img; }    public double getSpeed() {        return speed;    }    public double getDamage() {        return damage;    }    public void setDamage(double damage) {        this.damage = damage;    }    public void setImg(Image img) { this.img = img; }    public void setSpeed(double speed) {        this.speed = speed;    }    public void setEnemy(Enemy enemy) {        this.enemy = enemy;    }    public void destroy(Bullet bullet){        GameField.getRemovingBullet().add(bullet);    }    public void updateBullet(){    }    public void update(){        if (checkBulletMeetEnemy()) {            //TODO: harm the enemy            getEnemy().doAttack(getDamage());            destroy(this);        }    }    public boolean checkBulletMeetEnemy(){        if(Math.round(Vec2d.distance(getPosX(),getPosY(), getEnemy().getPosX(), getEnemy().getPosY())) < getSpeed()){//            System.out.println("HIT!");            return true;        }        return false;    }    @Override    public void draw(GraphicsContext gc) {        double x = getEnemy().getPosX() - getPosX();        double y = getEnemy().getPosY() - getPosY();        double inRads = Math.atan2(x, y);        setPosX(getPosX() + getSpeed() * Math.sin(inRads));        setPosY(getPosY() + getSpeed() * Math.cos(inRads));        //System.out.println("SHOOT!");        gc.drawImage(getImg(), getPosX(), getPosY());    }}