package core;import Entity.Immoveable.RoadExtend.Spawn;import Entity.Immoveable.RoadExtend.Target;import Entity.Moveable.Enemy.Enemy;import core.Config;import javafx.animation.AnimationTimer;import javafx.scene.Group;import javafx.scene.Scene;import javafx.scene.canvas.GraphicsContext;import javafx.scene.control.Button;import javafx.scene.control.ToggleButton;import javafx.scene.control.ToggleGroup;import javafx.scene.image.ImageView;import javafx.stage.Stage;import javafx.util.Pair;import java.io.*;import java.util.ArrayList;import java.util.LinkedList;import java.util.Queue;import java.util.Scanner;/*|=======================================================================||   This class start a game field (game field's status, config, ...)    ||=======================================================================| */public class GameStage {    private static int playerHP = Config.GAME_HEART;    private static int playerFinance = Config.GAME_START_MONEY;    public GameStage() {    }    public int getPlayerHP() {        return playerHP;    }    public void setPlayerHP(int playerHP) {        this.playerHP = playerHP;    }    public int getPlayerFinance() {        return playerFinance;    }    public void decreaseHP() {        setPlayerHP(getPlayerHP() - 1);    }    public static void earnMoney(int money) {        playerFinance += money;    }    public static void buyTower(int money) {        playerFinance -= money;    }    public static void playGame(Stage primaryStage, Scene theScene, GameField gameField, Group root, GraphicsContext gc) {        ToggleGroup towerToggle = new ToggleGroup();        //Button        ImageView ivNormalTowerButton = new ImageView(GameField.getImageSheet().imageSheet.get(8 * 23 + 19));        ToggleButton normalTowerButton = new ToggleButton("$1           Normal Tower", ivNormalTowerButton);        root.getChildren().add(normalTowerButton);        normalTowerButton.setLayoutX(Config.TILE_HORIZONTAL * Config.MAP_WIDTH);        //Button        ImageView ivMachineGunTowerButton = new ImageView(GameField.getImageSheet().imageSheet.get(10 * 23 + 20));        ToggleButton machineGunTowerButton = new ToggleButton("$5  Machine Gun Tower", ivMachineGunTowerButton);        root.getChildren().add(machineGunTowerButton);        machineGunTowerButton.setLayoutX(Config.TILE_HORIZONTAL * Config.MAP_WIDTH);        machineGunTowerButton.setLayoutY(Config.TILE_VERTICAL + 12);        //Button        ImageView ivRocketTowerButton = new ImageView(GameField.getImageSheet().imageSheet.get(8 * 23 + 20));        ToggleButton rocketTowerButton = new ToggleButton("$20          Rocket Tower", ivRocketTowerButton);        root.getChildren().add(rocketTowerButton);        rocketTowerButton.setLayoutX(Config.TILE_HORIZONTAL * Config.MAP_WIDTH);        rocketTowerButton.setLayoutY((Config.TILE_VERTICAL + 12) * 2);        //Button        ImageView ivSniperTowerButton = new ImageView(GameField.getImageSheet().imageSheet.get(10 * 23 + 19));        ToggleButton sniperTowerButton = new ToggleButton("$10           Sniper Tower", ivSniperTowerButton);        root.getChildren().add(sniperTowerButton);        sniperTowerButton.setLayoutX(Config.TILE_HORIZONTAL * Config.MAP_WIDTH);        sniperTowerButton.setLayoutY((Config.TILE_VERTICAL + 12) * 3);        normalTowerButton.setToggleGroup(towerToggle);        machineGunTowerButton.setToggleGroup(towerToggle);        rocketTowerButton.setToggleGroup(towerToggle);        sniperTowerButton.setToggleGroup(towerToggle);        AnimationTimer timer = new AnimationTimer() {            long time = System.nanoTime();            @Override            public void handle(long now) {                GameController.mouseClicked(theScene, gameField, root, gc, towerToggle, normalTowerButton, machineGunTowerButton, rocketTowerButton, sniperTowerButton);                gameField.update(now - time);                gameField.draw(gc, gameField);                gameField.gameOver(theScene, gameField, root, gc, primaryStage);                //if(player don't play more, click exit button to exit the game) GameStage.closeWindow(primaryStage);            }        };        timer.start();        primaryStage.show();    }    public static boolean hasEnoughMoney(int cost) {        if (playerFinance >= cost) return true;        return false;    }    public boolean gameOver() {        if (getPlayerHP() <= 0) return true;        return false;    }    public static GameField loadGameField(String fileName) {        GameField gameField = new GameField();        Scanner sc = null;        try {            sc = new Scanner(new File(fileName));        } catch (FileNotFoundException e) {            System.err.println(e.toString());            return null;        }        //read first line, contain map data        String line = sc.nextLine();        String[] mapData = line.split(" ");        /*         * Load map, work properly, do not touch         */        gameField.loadMap(mapData[0], mapData[1], mapData[2], mapData[3]);        ArrayList<Queue<Pair<Enemy, Integer>>> waitingEnemy = new ArrayList<>();        int wave = 0;        while (sc.hasNext()){            switch (sc.next()){                case "wave":                    wave = sc.nextInt();                    while (wave > waitingEnemy.size() - 1) waitingEnemy.add(new LinkedList<>());                    break;                case "spawn":                    int [] dataS = new int [2];                    dataS[0] = sc.nextInt();                    dataS[1] = sc.nextInt();                    System.out.println("spawn: " + dataS[0] + " " + dataS[1]);                    Spawn spawn = new Spawn();                    spawn.setPosXY(dataS[1], dataS[0]);                    GameField.getRoadInfo().setSpawn(spawn);                    break;                case "target":                    int [] dataT = new int [2];                    dataT[0] = sc.nextInt();                    dataT[1] = sc.nextInt();                    System.out.println("target: " + dataT[0] + " " + dataT[1]);                    Target target = new Target();                    target.setPosXY(dataT[1], dataT[0]);                    GameField.getRoadInfo().setTarget(target);                    break;            }        }        sc.close();        gameField.setRoadInfo();        return gameField;    }}